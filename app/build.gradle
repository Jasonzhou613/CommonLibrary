apply plugin: 'com.android.application'

android {
    compileSdkVersion compileVersion
    buildToolsVersion buildVersion

    defaultConfig {
        applicationId "com.ttsea.library"
        minSdkVersion minVersion
        targetSdkVersion targetVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        ndk {
            abiFilters 'armeabi-v7a', 'x86', 'arm64-v8a', 'x86_64', 'armeabi'
        }
    }

    signingConfigs {
        release {
            storeFile file("../keystore/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        debug {
            storeFile file("../keystore/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            //resValue("string", "PORT_NUMBER", "8081")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def fileName = output.outputFileName
            if (fileName != null && fileName.endsWith('.apk')) {
                String flavorName = getVariantData().getVariantConfiguration().getFlavorName()
                if (flavorName != null && flavorName.length() > 0) {
                    flavorName = flavorName.replace("flavor", "")
                } else {
                    flavorName = "app"
                }
                String buildTypeName = getVariantData().getVariantConfiguration().getBuildType().getName()
                String versionName = getVariantData().getVariantConfiguration().getVersionName()

                output.outputFileName = flavorName + "-" + buildTypeName + "-v" + versionName + "-" + releaseTime() + ".apk"
            }
        }
    }
}

dependencies {
    implementation(project(path: ':commonlibrary'))
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:$appcompat"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$coordinatorlayout"
    implementation "com.google.android.material:material:$google_material"

    //Okhttp3
    implementation 'com.squareup.okhttp3:okhttp:3.14.9'
    //glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    testImplementation "junit:junit:$junit"
    androidTestImplementation "androidx.test.ext:junit:$ext_junit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core"
}

def static releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}